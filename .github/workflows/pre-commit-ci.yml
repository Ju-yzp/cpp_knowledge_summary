name: Pre-Commit CI Check
# 触发条件：推送到主分支（可根据项目调整分支名）、PR 到主分支
on:
  push:
    branches: [ main, master ]  # 替换为项目实际的主分支名
    paths:  # 仅当以下类型文件变更时触发，减少无效执行
      - '**.h'
      - '**.hh'
      - '**.hxx'
      - '**.hpp'
      - '**.c'
      - '**.cc'
      - '**.cpp'
      - '**.cxx'
      - 'CMakeLists.txt'
      - '**.cmake'
      - '**.rst'
      - '**.yml'
      - '**.yaml'
      - '**.json'
      - '.pre-commit-config.yaml'  # pre-commit 配置变更时也触发
  pull_request:
    branches: [ main, master ]
    paths:  # 与 push 保持一致，仅检查相关文件
      - '**.h'
      - '**.hh'
      - '**.hxx'
      - '**.hpp'
      - '**.c'
      - '**.cc'
      - '**.cpp'
      - '**.cxx'
      - 'CMakeLists.txt'
      - '**.cmake'
      - '**.rst'
      - '**.yml'
      - '**.yaml'
      - '**.json'
      - '.pre-commit-config.yaml'

# 并发控制：同一 PR/push 取消旧任务，避免资源浪费
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  pre-commit-check:
    name: Run Pre-Commit Hooks
    runs-on: ubuntu-latest  # 使用 Ubuntu 环境（稳定、常用）
    steps:
      # 1. 拉取仓库代码
      - name: Checkout code
        uses: actions/checkout@v4  # 拉取当前分支代码

      # 2. 安装 Python（pre-commit 依赖 Python）
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'  # 选择与项目兼容的 Python 版本（3.9+ 即可）
          cache: 'pip'  # 缓存 pip 依赖，加速后续执行

      # 3. 安装 pre-commit
      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      # 4. 缓存 pre-commit 钩子依赖（避免每次重新下载工具）
      - name: Cache pre-commit dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit  # pre-commit 缓存目录
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}  # 配置文件变更时更新缓存
          restore-keys: pre-commit-  # 复用旧缓存

      # 5. 执行所有 pre-commit 钩子（全量检查，确保所有文件符合规范）
      - name: Run pre-commit hooks
        run: pre-commit run --all-files  # --all-files 检查所有文件（而非仅暂存文件）
